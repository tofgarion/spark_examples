** The Swap_Ranges algorithm

   The ~swap_ranges~ algorithm exchanges the contents of two arrays.
   Its signature reads:
   
   ~procedure Swap_Ranges(A : in out T_Arr; B: in out T_Arr)~
   
*** Specification of Swap_Ranges

    The specification of ~swap_ranges~ is the following:

    #+BEGIN_SRC ada
    procedure Swap_Ranges(A : in out T_Arr; B: in out T_Arr) with
     Pre => A'Length = B'Length,
     Post => A'Old = B and then B'Old = A;
    #+END_SRC

    The precondition expresses the fact that ~A~ and ~B~ must have the same length.
    The postcondition expresses the fact that the values in ~A~ and ~B~ have actually
    been exchanged.

*** Implementation of Swap_Ranges

    #+BEGIN_SRC ada
procedure Swap_Ranges (A : in out T_Arr; B : in out T_Arr) is
   begin

      for J in 0 .. A'Length - 1 loop
         declare
            K : constant Positive := A'First + J;
            L : constant Positive := B'First + J;
         begin

            Swap (A (K), B (L));

            pragma Loop_Invariant (K = A'First + J and L = B'First + J);
            pragma Loop_Invariant
              (B'Loop_Entry (B'First .. L) = A (A'First .. K));
            pragma Loop_Invariant
              (A'Loop_Entry (A'First .. K) = B (B'First .. L));
            pragma Loop_Invariant
              (if
                 L < B'Last
               then
                 B'Loop_Entry (L + 1 .. B'Last) = B (L + 1 .. B'Last));
            pragma Loop_Invariant
              (if
                 K < A'Last
               then
                 A'Loop_Entry (K + 1 .. A'Last) = A (K + 1 .. A'Last));
         end;

      end loop;
   end Swap_Ranges;
    #+END_SRC

    ~SPARK~ encounters a few problems using sliced arrays in the loop invariants.
    ~range check~ exceptions might appear if you use variables as boundaries
    for the sliced arrays. To workaround these issues, you can used local
    constants, with the ~declare~ - ~begin~ - ~end;~ syntax, to create
    local constant in your loop and therefore, slice you arrays with them.

    The loop invariants specify that :
      - the two local constants have the right value.
      - the ~J~ first values of the arrays have been exchanged.
      - the next values are still the same and they can be exchanged in the next
	entry in loop.

     Using ~gnatprove~, everything is proved.
