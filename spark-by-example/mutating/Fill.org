** The Fill algorithm

   The ~Fill~ algorithm initializes an array with a particular value.
   Its signature reads:
   ~procedure Fill (A : in out T_Arr; Val : T)~

   ~A~ needs to be passed as an ~in~ parameter because we are going to
   use the function ~Constant_Range_From_Location~ on ~A~. (see Implementation)

*** Specification of Fill

    The specification of ~fill~ is very simple.
    #+BEGIN_SRC ada
    procedure Fill (A : in out T_Arr; Val : T) with
      Pre => A'Length > 0,
Post => Constant_Range_From_Location(A, Val, A'First, A'Length);
    #+END_SRC

*** Implementation of Fill

    The implementation of ~Fill~ is the following:

    #+BEGIN_SRC ada
    procedure Fill (A : in out T_Arr; Val : T) is
      begin
      for I in A'Range loop
	 A(I) := Val;
	 
	 pragma Loop_Invariant(Constant_Range_From_Location(A, Val, A'First, I-A'First+1));
      end loop;
end Fill;
    #+END_SRC

    The loop invariant specify that there is a constant range of ~Val~
    starting at index ~A'First~ with length ~I - A'First + 1~.

    Using ~gnatprove~, everything is proved.
