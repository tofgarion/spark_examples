** The Find_End algorithm

   The ~Find_End~ algorithm finds the last occurence of a given
   subsquence in a given array. It's signature can be expressed as:

   
   #+BEGIN_SRC ada
     function Find_End (A : T_Arr; B : T_Arr) return Option
   #+END_SRC
   
   ~Find_End~ will return an option containing the *last valid* index
   ~I~ of ~A~ such that ~A (I .. I + B'Length -1 ) = B~ if it exists.


*** The predicate Has_Sub_Range_In_Postfix

    The ~Find_End~ function is quite similar to the [[Search.org][Search]] function,
    since they both have to find the same thing, the main difference
    being that ~Search~ stops at the first occurence of the
    subsequence, whereas ~Find_End~ will continue looking until
    finding the last. For this reason the specification of ~Find_End~
    will re-use many of the ghost functions used in the specification
    of ~Search~. We still need to add one new ghost function: ~Has_Sub_Range_In_Postfix~

    #+BEGIN_SRC ada
     function Has_Sub_Range_In_Postfix
       (A     : T_Arr;
	Index : Integer;
	B     : T_Arr) return Boolean is
	(for Some J in Index .. A'Last-B'Length+1 => Equal_Subrange(A, J, B)) with
	Pre => A'Length >=B'Length
	and then A'Last<Positive'Last
	and then Index <= A'Last - B'Length + 1
	and then Index >=A'First;
    #+END_SRC
    
    This function will check wether the subsequence represented by
    the array ~B~ can be found in the array ~A~ starting after the
    index ~J~.

*** Specification of Find_End

The specification of ~Find_End~ is as follows:

#+BEGIN_SRC ada
Function Find_End (A : T_Arr; B: T_arr) return Option with
     Pre            =>A'Last < Positive'Last and then B'First <= B'Last,
     Contract_Cases =>
     (B'Length = 0 => not Find_End'Result.Exists,
      A'Length < B'Length => not Find_End'Result.Exists,
      A'Length >=B'Length and then Has_Sub_Range(A,B) =>
	Find_End'Result.Exists
	and then Equal_Subrange(A, Find_End'Result.Value , B)
	and then 
	(if
	   Find_End'Result.Value < A'Last-B'Length+1
	   then
             (not Has_Sub_Range_In_Postfix(A, Find_End'Result.Value+1,B))),
       others  => not Find_End'Result.Exists);
#+END_SRC

  - The precondtition expresses:
     - the fact that the last index of A is less than the last ~Positive~
      value, as in the ghost functions we will use ~A'Last+1~.
     - the fact that B'First is less than B'Last. This precondition is
      necessary, otherwise the contract cases can neither be proved,
      nor their disjointedness
  - The post conditions are expressed through 4 contract cases:
     1. if B is empty, then there is no index returned
     2. if A is shorter than B, then again there is no index returned
     3. A is longer than B and there is a subsequence in A equal to
      B. Then 
       - a valid index will be returned 
       - the subsequence of A starting at this index and of length
         ~B'Length~ will be equal to B
       - if the returned index is not ~A'Last - B'Length + 1~ (the last
         index where a subsequence of A can be equal to B), then for all
         indexes K of A greater than the returned index, the subsequence
         of length ~B'Length~ starting at index K is not equal to B.
     4. Otherwise there is no index returned.

*** Imprementation of Find_End

    #+BEGIN_SRC ada
    function Find_End (A : T_Arr; B : T_Arr) return Option is
      Result :Option :=(Exists => False);
   begin
      if(A'Length<B'Length or else B'Length = 0) then
	 return Result;
      end if;
      
      for I in A'First .. A'Last - B'Length +1 loop
	 if A(I..I-1+B'Length) = B then
	    Result := (Exists => True, Value => I);
	 end if;	 
	 
	 pragma Loop_Variant (Increases => I);
	 pragma Loop_Invariant(if Result.Exists
				 then Equal_Subrange(A,Result.Value,B)
	                         and then Result.Value in A'First .. A'Last-B'Length +1
	                         and then (if Result.Value<I
					     then (for all J in Result.Value+1 .. I => not Equal_Subrange(A,J,B))
	                                     else True)
	                         else not Has_Sub_Range_In_Prefix(A,I,B));
      end loop;
      
      return Result;
      
   end Find_End;
    #+END_SRC
 
    * the implementation is rather simple: We range over ~A~ indexes
      trying to find a subsequence equalt to ~B~, each time we do find
      one we save the current index ~I~ in ~Result.Value~. In this
      function we do not return at the first match since we want to
      find the last subsequence of ~A~ equal to ~B~, instead we let the
      programm look at the entire range of indexes.
    * the loop variant is ~I~ again
    * the loop invariant specifies that:
      - we have found a matching subsequence of ~A~, and then:
	1. It starts at ~Result.Value~
	2. ~Result.Value~ is in the range ~A'First .. A'Last-B'Length
           +1~
	3. If ~Result.Value is different from I then for all ~K~ in
            ~Result'Value+1 .. I~ there is no subrange of ~A~ starting
            at index ~K~ of length ~B'Length~ equal to ~B~
      - or we haven't found any matching subsequence of ~A~ starting at an index lower than ~I~
      
	

When using ~gnatprove~ on ~Find_End~ all the assertions are proved.

One can notice that there are quantifiers in the loop invariant in the
second condition, with . If we
tried to hide the quantifiers through the use of ghost functions, the
second condition of the loop invariant would be :

#+BEGIN_SRC ada
if Result.Value <I
  then (not Has_Sub_Range(A(Result.Value+1 .. I-1+B'Length),B))
  else True
#+END_SRC

This approach, while being easier to read and understand for humans,
does not work. Indeed, all the solvers (CVC4, Z3 and AltErgo) fail to
prove the negation of ~Has_Sub_Range~.
