** The Count algorithm
   
   The ~Count~ algorithm counts the number of occurrences of a value ~Val~
   in an array ~A~. Its signature can be expressed as :

   #+BEGIN_SRC ada
     function Count (A : T_Arr; Val : T) return Natural
   #+END_SRC

   This algorithm does not return an option because the result can actually be ~0~.

*** The predicate Occ

    We will define a recursive function ~Occ_Def~ which will
    be used in ~Occ~. Indeed, the tool only introduces axioms for
    postconditions of non-recursive function. You can find more
    informations [[http://docs.adacore.com/spark2014-docs/html/ug/gnatprove_by_example/manual_proof.html#manual-proof-using-ghost-code][here]].

    #+BEGIN_SRC ada
   function Remove_Last
     (A : T_Arr) return T_Arr is
     (A (A'First .. A'Last - 1)) with
      Pre => A'Length > 0,
      Ghost;

   function Occ_Def
     (A   : T_Arr;
      Val : T) return Natural is
     (if A'Length = 0 then 0
      elsif A (A'Last) = Val then Occ_Def (Remove_Last (A), Val) + 1
      else Occ_Def (Remove_Last (A), Val)) with
      Post => Occ_Def'Result <= A'Length;
   pragma Annotate (Gnatprove, Terminating, Occ_Def);
    #+END_SRC

    The line ~pragma Annotate (Gnatprove, Terminating, Occ_Def);~ is
    very important here. It states that the function ~Occ_Def~ terminates.
    Without this annotation, the tool would not be able to prove certain
    loop invariants. In return, the command ~gnatprove~ may print 
    ~medium: subprogram "Occ_Def" might not terminate, terminating annotation
    could be incorrect~.
    The tool does not include inductive reasoning. One solution would be 
    to prove the termination of the recursive function with Coq. 

    After that, the definition of the predicate ~Occ~ is rather easy:
    
    #+BEGIN_SRC ada
    function Occ (A : T_Arr; Val : T) return Natural is (Occ_Def (A, Val)) with
      Post => Occ'Result <= A'Length;
    #+END_SRC

    The postcondition is necessary to prove loop invariants in ~Count~.

*** Specification of Count

    The specification of ~Count~ is:

    #+BEGIN_SRC ada
function Count (A : T_Arr; Val : T) return Natural with
      Post =>
      (Count'Result <= A'Length
       and then 0 <= Count'Result
       and then Count'Result = Occ (A, Val));
    #+END_SRC

    The postconditions express
      - that the number returned is rational (it is not less than 0 nor is it more than ~A'Length~.
      - that the number returned is equal to the number of occurrences of ~Val~ in the array ~A~.

*** Implementation of Count

    The implementation of ~Count~ is the following:

    #+BEGIN_SRC ada
function Count (A : T_Arr; Val : T) return Natural is
      Result : Natural := 0;
   begin
      for I in A'Range loop
         if A (I) = Val then
            Result := Result + 1;
         end if;

         pragma Loop_Invariant (Result <= A'Length);
         pragma Loop_Invariant (Result = Occ (A (A'First .. I), Val));
         pragma Loop_Variant (Increases => I);
      end loop;

      return Result;
   end Count;
    #+END_SRC

    The first invariant states that we always stay in the good range for the result.
    The second one states that at each loop iteration, we can assert that ~Result~ is equal
    to the number of occurrences of ~Val~ in the slice of the array he has traversed.
