#+TITLE: SPARK by Example -- results, notes and progress

Algorithms from ACSL by Example Sulfur edition. We use SPARK Discovery
2017 edition.

* Non-mutating algorithms
  :PROPERTIES:
  :COLUMNS:  %27ITEM(Function to prove) %15Status %6Level %16Assigned_To(Assigned to)
  :Status_ALL: "In progress" "Not started yet" "Finished" ""
  :Level_ALL: "0" "1" "2" "3" "4"
  :Assigned_to_ALL: "Christophe" "Léo" "Joffrey" "Jérôme"
  :END:

** Find (naive version)
   :PROPERTIES:
   :Status:      Finished
   :Level:       0
   :Assigned_To: Christophe
   :END:

   - level 0: everything is proved but overflow and range check
     (normal)

** Find
   :PROPERTIES:
   :Status:      Finished
   :Level:       0
   :Assigned_To: Christophe
   :END:

   -level 0: everything is proved

** Find_First_Of
   :PROPERTIES:
   :Status:      Finished
   :Level:       0
   :Assigned_To: Christophe
   :END:

   - level 0: everything is proved

** Adjacent_Find
   :PROPERTIES:
   :Status:      Finished
   :Level:       0
   :Assigned_To: Christophe
   :END:

   - level 0: everything is proved

** Equal
   :PROPERTIES:
   :Status:      Finished
   :Level:       1
   :Assigned_To: Christophe
   :END:

   - level 0: invariant preservation + postcondition not proved
   - level 1: everything is proved

** Mismatch
   :PROPERTIES:
   :Status:      Finished
   :Level:       1
   :Assigned_To: Christophe
   :END:

   - level 0: invariant preservation + postcondition not proved
   - level 1: everything is proved

** Search
   :PROPERTIES:
   :Status:      Finished
   :Level:       1
   :Assigned_To: Christophe
   :END:

   - can be proved with SPARK GPL with a timeout of 30s on my
     machine. Can be proved easily with SPARK PRO 2017. Need
     investigation.

** Search_N
   :PROPERTIES:
   :Status:      In progress
   :Level:
   :Assigned_To: Christophe
   :END:

** Find_End
   :PROPERTIES:
   :Status:      In progress
   :Level:       1
   :Assigned_To: Léo Creuse
   :END:

   -level 0: Cannot prove Has_Sub_Range_In_Prefix function in loop invariant.
   -level 1: everything is proved

** Count
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:

   - no particular problem using axiomatic definition of Occ (see
     http://docs.adacore.com/spark2014-docs/html/ug/gnatprove_by_example/manual_proof.html#manual-proof-using-ghost-code)
   - not using a Size parameter seems to make the proof easier
   - functions Occ_Def and Occ are also proved
   - easier than ACSL, no need to prove lemmas?

* Maximum and minimum algorithms
** Max_Element
   :PROPERTIES:
   :Status:      Finished
   :Level: 0
   :Assigned_To: Joffrey
   :END:
** Max_Seq
   :PROPERTIES:
   :Status:   Finished
   :Level: 0
   :Assigned_To: Joffrey
   :END:
** Min_Element

   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
* Binary search algorithms
** Lower_Bound
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Upper_Bound
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Equal_Range
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Binary_Search
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:

* Mutating algorithms
** Swap
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Fill
   :PROPERTIES:
   :Status: Finished
   :Level: 0
   :Assigned_To: Joffrey
   :END:
** Swap_Ranges
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Copy
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Copy_Backward
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Reverse_Copy
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Reverse
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Rotate_Copy
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Rotate
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Replace_Copy
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Replace
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Remove_Copy
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Remove
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Random_Shuffle
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
* Numeric algorithms
** Iota
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Accumulate
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Inner_Product
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Partial_Sum
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Adjacent_Difference
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
* Heap algorithms
** Is_Heap
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Push_Heap
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Pop_Heap
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Make_Heap
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Sort_Heap
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:

* Sorting Algorithms
** Is_Sorted
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Partial_Sort
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Selection_Sort
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Insertion_Sort
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:
** Heap_Sort
   :PROPERTIES:
   :Status:      Not started yet
   :Level:
   :Assigned_To:
   :END:

* The Stack data type
